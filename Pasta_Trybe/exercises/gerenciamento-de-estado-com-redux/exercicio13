 //  Trabalhando com Object.assign

 const defaultState = {
  user: 'CamperBot',
  status: 'offline',
  friends: '732,982',
  community: 'freeCodeCamp'
};

const immutableReducer = (state = defaultState, action) => {
  switch(action.type) {
    case 'ONLINE':
      // Don't mutate state here or the tests will fail
      return  Object.assign({}, state, {status: 'online'});
    default:
      return state;
  }
};

const wakeUp = () => {
  return {
    type: 'ONLINE'
  }
};

// Redux: Copie um objeto com Object.assign
Os últimos vários desafios funcionaram com matrizes, mas existem maneiras de ajudar a impor a imutabilidade do estado quando o estado objecttambém é. Uma ferramenta útil para lidar com objetos é o Object.assign()utilitário. Object.assign()pega um objeto de destino e objetos de origem e mapeia propriedades dos objetos de origem para o objeto de destino. Todas as propriedades correspondentes são substituídas por propriedades nos objetos de origem. Esse comportamento é comumente usado para fazer cópias superficiais de objetos, passando um objeto vazio como o primeiro argumento seguido pelo (s) objeto (s) que você deseja copiar. Aqui está um exemplo:

const newObject = Object.assign({}, obj1, obj2);

Isso é criado newObjectcomo um novo object, que contém as propriedades que existem atualmente em obj1e obj2.
