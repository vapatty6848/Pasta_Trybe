/* Organiza√ß√£o
 meu arquivo principal vai ficar gigante!" üò±
C O Express tem uma solu√ß√£o bem interessante para organizar rotas: o Router .
O Router pode ser visto como uma vers√£o menor do app , onde s√£o declaradas apenas as rotas e middlewares. Ele √© depois "plugado" no "app principal".
Como exemplo uma API que retorna dados sobre os Simpsons: */

// simpsons.js
const express = require('express');
const router = express.Router();

router.get('/', function (req, res) {
  res.send('Hello World!');
});

router.get('/homer', function (req, res) {
  res.send('Hello Homer!');
});

module.exports = router;

// index.js
const express = require('express');
const simpsons = require('./simpsons');

const app = express();

/* Todas as rotas com /simpsons/<alguma-coisa> entram aqui e v√£o para o roteador. */
app.use('/simpsons', simpsons);

app.listen(3000);
/* 
tiverem No exemplo acima, as rotas /simpsons e /simpsons/homer est√£o criadas e ser√£o ouvidas pela aplica√ß√£o.
Voltando √† analogia da esteira, quando fazemos o c√≥digo app.use('/simpsons', simpsons) est√° sendo criada uma m√°quina, ou, no caso, um Middleware . Esse Middleware √© respons√°vel por alternar os destinos de acordo com a rota presente na embalagem do pacote. Esse tipo de Middleware √© chamado de Middleware de Rota. Mas √© importante destacar que ele tamb√©m pode ser usado pra um m√©todo espec√≠fico, como, por exemplo: caso n√£o tiv√©ssemos feito o c√≥digo acima e quis√©ssemos apenas o m√©todo GET para o endpoint /simpsons , bastaria fazer app.get('/simpsons', simpsons) . */
